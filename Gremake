<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Galaga Replica</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: black;
      color: white;
      font-family: Arial, sans-serif;
    }
    canvas {
      display: block;
    }
    #score {
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 20px;
    }
    .controls {
      position: absolute;
      bottom: 20px;
      width: 100%;
      display: flex;
      justify-content: space-around;
      pointer-events: none;
    }
    .controls button {
      background-color: rgba(255, 255, 255, 0.8);
      border: none;
      border-radius: 50%;
      width: 60px;
      height: 60px;
      font-size: 24px;
      pointer-events: auto;
      cursor: pointer;
    }
    .controls button:active {
      background-color: rgba(255, 255, 255, 1);
    }
  </style>
</head>
<body>
  <div id="score">Score: 0</div>
  <canvas id="gameCanvas"></canvas>
  <div class="controls">
    <button id="leftButton">&#8592;</button>
    <button id="shootButton">&#9679;</button>
    <button id="rightButton">&#8594;</button>
  </div>
  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const player = {
      x: canvas.width / 2,
      y: canvas.height - 50,
      width: 40,
      height: 30,
      speed: 5,
      bullets: [],
    };

    const enemies = [];
    const enemyRows = 5;
    const enemyCols = 10;
    const enemySpacing = 40;
    let score = 0;

    function createEnemies() {
      for (let row = 0; row < enemyRows; row++) {
        for (let col = 0; col < enemyCols; col++) {
          enemies.push({
            x: col * enemySpacing + 50,
            y: row * enemySpacing + 50,
            width: 30,
            height: 20,
            color: 'red',
            speed: 1 + row * 0.2,
            direction: 1,
          });
        }
      }
    }

    function drawPlayer() {
      // Draw the main body of the spaceship (triangle)
      ctx.fillStyle = 'white';
      ctx.beginPath();
      ctx.moveTo(player.x + player.width / 2, player.y); // Top point
      ctx.lineTo(player.x, player.y + player.height); // Bottom-left point
      ctx.lineTo(player.x + player.width, player.y + player.height); // Bottom-right point
      ctx.closePath();
      ctx.fill();

      // Draw the cockpit (small circle)
      ctx.fillStyle = 'blue';
      ctx.beginPath();
      ctx.arc(player.x + player.width / 2, player.y + player.height / 3, 5, 0, Math.PI * 2);
      ctx.fill();

      // Draw the wings (lines extending from the sides)
      ctx.strokeStyle = 'white';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.moveTo(player.x - 10, player.y + player.height / 2);
      ctx.lineTo(player.x + player.width + 10, player.y + player.height / 2);
      ctx.stroke();
    }

    function movePlayer(direction) {
      if (direction === 'left' && player.x > 0) {
        player.x -= player.speed;
      } else if (direction === 'right' && player.x < canvas.width - player.width) {
        player.x += player.speed;
      }
    }

    function shootBullet() {
      player.bullets.push({ x: player.x + player.width / 2 - 2, y: player.y, width: 4, height: 10, speed: 7 });
    }

    function drawBullets(bullets) {
      ctx.fillStyle = 'pink'; // Changed bullet color to pink
      bullets.forEach((bullet, index) => {
        bullet.y -= bullet.speed;
        ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);

        if (bullet.y < 0) {
          bullets.splice(index, 1);
        }
      });
    }

    function drawEnemies() {
      enemies.forEach((enemy, index) => {
        ctx.fillStyle = enemy.color;
        ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);

        enemy.x += enemy.speed * enemy.direction;

        if (enemy.x <= 0 || enemy.x >= canvas.width - enemy.width) {
          enemy.direction *= -1;
          enemy.y += 20;
        }

        if (enemy.y >= canvas.height) {
          alert('Game Over!');
          window.location.reload();
        }
      });
    }

    function checkCollisions() {
      player.bullets.forEach((bullet, bulletIndex) => {
        enemies.forEach((enemy, enemyIndex) => {
          if (
            bullet.x < enemy.x + enemy.width &&
            bullet.x + bullet.width > enemy.x &&
            bullet.y < enemy.y + enemy.height &&
            bullet.y + bullet.height > enemy.y
          ) {
            player.bullets.splice(bulletIndex, 1);
            enemies.splice(enemyIndex, 1);
            score += 10;
            document.getElementById('score').innerText = `Score: ${score}`;
          }
        });
      });
    }

    function gameLoop() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawPlayer();
      drawBullets(player.bullets);
      drawEnemies();
      checkCollisions();

      requestAnimationFrame(gameLoop);
    }

    // Touch controls
    const leftButton = document.getElementById('leftButton');
    const rightButton = document.getElementById('rightButton');
    const shootButton = document.getElementById('shootButton');

    leftButton.addEventListener('touchstart', () => movePlayer('left'));
    rightButton.addEventListener('touchstart', () => movePlayer('right'));
    shootButton.addEventListener('touchstart', shootBullet);

    // Prevent scrolling on touch devices
    document.body.addEventListener('touchmove', (e) => e.preventDefault(), { passive: false });

    createEnemies();
    gameLoop();
  </script>
</body>
</html>
